<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GCD详解]]></title>
    <url>%2F2017%2F11%2F21%2FGCD%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[GCD（Grand Central Dispatch） 介绍GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。GCD这块已经开源，地址http://libdispatch.macosforge.org。GCD中的FIFO队列称为dispatch queue，用来保证先进来的任务先得到执行。 GCD概要 和operation queue一样都是基于队列的并发编程API，他们通过集中管理大家协同使用的线程池。 公开的5个不同队列：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O） 可创建自定义队列：串行或并列队列。自定义一般放在Default Priority Queue和Main Queue里。 操作是在多线程上还是单线程主要是看队列的类型和执行方法，并行队列异步执行才能在多线程，并行队列同步执行就只会在这个并行队列在队列中被分配的那个线程执行。 基本概念 系统标准两个队列 1234//全局队列，一个并行的队列dispatch_get_global_queue//主队列，主线程中的唯一队列，一个串行队列dispatch_get_main_queue 自定义队列 1234//串行队列dispatch_queue_create(&quot;com.starming.serialqueue&quot;, DISPATCH_QUEUE_SERIAL)//并行队列dispatch_queue_create(&quot;com.starming.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT) 同步异步线程创建 1234//同步线程dispatch_sync(..., ^(block))//异步线程dispatch_async(..., ^(block)) 队列（dispatch queue） Serial：又叫private dispatch queues，同时只执行一个任务。Serial queue常用于同步访问特定的资源或数据。当你创建多个Serial queue时，虽然各自是同步，但serial queue之间是并发执行。 Main dispatch queue：全局可用的serial queue，在应用程序主线程上执行任务。 Concurrent：又叫global dispatch queue，可以并发的执行多个任务，但执行完成顺序是随机的。系统提供四个全局并发队列，这四个队列有这对应的优先级，用户是不能够创建全局队列的，只能获取。 12dipatch_queue_t queue;queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH,0); user create queue：创建自己定义的队列，可以用dispatch_queue_create函数，函数有两个参数，第一个自定义的队列名，第二个参数是队列类型，默认NULL或者DISPATCH_QUEUE_SERIAL的是串行，参数为DISPATCH_QUEUE_CONCURRENT为并行队列。 12dispatch_queue_t queuequeue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT); 自定义队列的优先级：可以通过dipatch_queue_attr_make_with_qos_class或dispatch_set_target_queue方法设置队列的优先级 12345678//dipatch_queue_attr_make_with_qos_classdispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_UTILITY, -1);dispatch_queue_t queue = dispatch_queue_create(&quot;com.starming.gcddemo.qosqueue&quot;, attr);//dispatch_set_target_queuedispatch_queue_t queue = dispatch_queue_create(&quot;com.starming.gcddemo.settargetqueue&quot;,NULL); //需要设置优先级的queuedispatch_queue_t referQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0); //参考优先级dispatch_set_target_queue(queue, referQueue); //设置queue和referQueue的优先级一样 dispatch_set_target_queue：可以设置优先级，也可以设置队列层级体系，比如让多个串行和并行队列在统一一个串行队列里串行执行，如下 12345678910111213141516171819dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL);dispatch_queue_t firstQueue = dispatch_queue_create(&quot;com.starming.gcddemo.firstqueue&quot;, DISPATCH_QUEUE_SERIAL);dispatch_queue_t secondQueue = dispatch_queue_create(&quot;com.starming.gcddemo.secondqueue&quot;, DISPATCH_QUEUE_CONCURRENT);dispatch_set_target_queue(firstQueue, serialQueue);dispatch_set_target_queue(secondQueue, serialQueue);dispatch_async(firstQueue, ^&#123; NSLog(@&quot;1&quot;); [NSThread sleepForTimeInterval:3.f];&#125;);dispatch_async(secondQueue, ^&#123; NSLog(@&quot;2&quot;); [NSThread sleepForTimeInterval:2.f];&#125;);dispatch_async(secondQueue, ^&#123; NSLog(@&quot;3&quot;); [NSThread sleepForTimeInterval:1.f];&#125;); 队列类型队列默认是串行的，如果设置改参数为NULL会按串行处理，只能执行一个单独的block，队列也可以是并行的，同一时间执行多个block 123456789101112- (id)init;&#123; self = [super init]; if (self != nil) &#123; NSString *label = [NSString stringWithFormat:@&quot;%@.isolation.%p&quot;, [self class], self]; self.isolationQueue = dispatch_queue_create([label UTF8String], 0); label = [NSString stringWithFormat:@&quot;%@.work.%p&quot;, [self class], self]; self.workQueue = dispatch_queue_create([label UTF8String], 0); &#125; return self;&#125; 5种队列，主队列（main queue）,四种通用调度队列，自己定制的队列。四种通用调度队列为 QOS_CLASS_USER_INTERACTIVE：user interactive等级表示任务需要被立即执行提供好的体验，用来更新UI，响应事件等。这个等级最好保持小规模。 QOS_CLASS_USER_INITIATED：user initiated等级表示任务由UI发起异步执行。适用场景是需要及时结果同时又可以继续交互的时候。 QOS_CLASS_UTILITY：utility等级表示需要长时间运行的任务，伴有用户可见进度指示器。经常会用来做计算，I/O，网络，持续的数据填充等任务。这个任务节能。 QOS_CLASS_BACKGROUND：background等级表示用户不会察觉的任务，使用它来处理预加载，或者不需要用户交互和对时间不敏感的任务。示例：后台加载显示图片12345678910override func viewDidLoad() &#123; super.viewDidLoad() dispatch_async(dispatch_get_global_queue(Int(QOS_CLASS_USER_INITIATED.value), 0)) &#123; // 将工作从主线程转移到全局队列中，这是dispatch_async调用，异步提交保证调用线程会继续执行下去，这样viewDidLoad在主线程上能够更早完成， let overlayImage = self.faceOverlayImageFromImage(self.image) dispatch_async(dispatch_get_main_queue()) &#123; // 新图完成，把一个闭包加入主线程用来更新UIImageView，只有在主线程能操作UIKit。 self.fadeInNewImage(overlayImage) // 更新UI &#125; &#125;&#125; 何时使用何种队列类型 主队列（顺序）：队列中有任务完成需要更新UI时，dispatch_after在这种类型中使用。 并发队列：用来执行与UI无关的后台任务，dispatch_sync放在这里，方便等待任务完成进行后续处理或和dispatch barrier同步。dispatch groups放在这里也不错。 自定义顺序队列：顺序执行后台任务并追踪它时。这样做同时只有一个任务在执行可以防止资源竞争。dipatch barriers解决读写锁问题的放在这里处理。dispatch groups也是放在这里。可以使用下面的方法简化QoS等级参数的写法 1234567891011121314151617181920212223var GlobalMainQueue: dispatch_queue_t &#123; return dispatch_get_main_queue()&#125;var GlobalUserInteractiveQueue: dispatch_queue_t &#123; return dispatch_get_global_queue(Int(QOS_CLASS_USER_INTERACTIVE.value), 0)&#125;var GlobalUserInitiatedQueue: dispatch_queue_t &#123; return dispatch_get_global_queue(Int(QOS_CLASS_USER_INITIATED.value), 0)&#125;var GlobalUtilityQueue: dispatch_queue_t &#123; return dispatch_get_global_queue(Int(QOS_CLASS_UTILITY.value), 0)&#125;var GlobalBackgroundQueue: dispatch_queue_t &#123; return dispatch_get_global_queue(Int(QOS_CLASS_BACKGROUND.value), 0)&#125;//使用起来就是这样，易读而且容易看出在使用哪个队列dispatch_async(GlobalUserInitiatedQueue) &#123; let overlayImage = self.faceOverlayImageFromImage(self.image) dispatch_async(GlobalMainQueue) &#123; self.fadeInNewImage(overlayImage) &#125;&#125; dispatch_once用法dispatch_once_t要是全局或static变量，保证dispatch_once_t只有一份实例1234567891011+ (UIColor *)boringColor;&#123; static UIColor *color; //只运行一次 static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; color = [UIColor colorWithRed:0.380f green:0.376f blue:0.376f alpha:1.000f]; &#125;); return color;&#125;dispatch_async 设计一个异步的API调用dispatch_async()，这个调用放在API的方法或函数中做。让API的使用者设置一个回调处理队列 123456789- (void)processImage:(UIImage *)image completionHandler:(void(^)(BOOL success))handler;&#123; dispatch_async(self.isolationQueue, ^(void)&#123; // do actual processing here dispatch_async(self.resultQueue, ^(void)&#123; handler(YES); &#125;); &#125;);&#125; 可以避免界面会被一些耗时的操作卡死，比如读取网络数据，大数据IO，还有大量数据的数据库读写，这时需要在另一个线程中处理，然后通知主线程更新界面，GCD使用起来比NSThread和NSOperation方法要简单方便。12345678910111213141516171819//代码框架dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; // 耗时的操作 dispatch_async(dispatch_get_main_queue(), ^&#123; // 更新界面 &#125;);&#125;);//下载图片的示例dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; NSURL * url = [NSURL URLWithString:@&quot;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&quot;]; NSData * data = [[NSData alloc]initWithContentsOfURL:url]; UIImage *image = [[UIImage alloc]initWithData:data]; if (data != nil) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; self.imageView.image = image; &#125;); &#125;&#125;); dispatch_after延后执行dispatch_after只是延时提交block，不是延时立刻执行。12345678- (void)foo&#123; double delayInSeconds = 2.0; dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * NSEC_PER_SEC)); dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123; [self bar]; &#125;);&#125; 范例，实现一个推迟出现弹出框提示，比如说提示用户评价等功能。12345678910111213func showOrHideNavPrompt() &#123; let delayInSeconds = 1.0 let popTime = dispatch_time(DISPATCH_TIME_NOW, Int64(delayInSeconds * Double(NSEC_PER_SEC))) // 在这里声明推迟的时间 dispatch_after(popTime, GlobalMainQueue) &#123; // 等待delayInSeconds将闭包异步到主队列 let count = PhotoManager.sharedManager.photos.count if count &gt; 0 &#123; self.navigationItem.prompt = nil &#125; else &#123; self.navigationItem.prompt = &quot;Add photos with faces to Googlyify them!&quot; &#125; &#125;&#125; 例子中的dispatch time的参数，可以先看看函数原型 1dispatch_time_t dispatch_time ( dispatch_time_t when, int64_t delta ); 第一个参数为DISPATCH_TIME_NOW表示当前。第二个参数的delta表示纳秒，一秒对应的纳秒为1000000000，系统提供了一些宏来简化 123#define NSEC_PER_SEC 1000000000ull //每秒有多少纳秒#define USEC_PER_SEC 1000000ull //每秒有多少毫秒#define NSEC_PER_USEC 1000ull //每毫秒有多少纳秒 这样如果要表示一秒就可以这样写123dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC);dispatch_time(DISPATCH_TIME_NOW, 1000 * USEC_PER_SEC);dispatch_time(DISPATCH_TIME_NOW, USEC_PER_SEC * NSEC_PER_USEC); dispatch_barrier_async使用Barrier Task方法Dispatch Barrier解决多线程并发读写同一个资源发生死锁Dispatch Barrier确保提交的闭包是指定队列中在特定时段唯一在执行的一个。在所有先于Dispatch Barrier的任务都完成的情况下这个闭包才开始执行。轮到这个闭包时barrier会执行这个闭包并且确保队列在此过程不会执行其它任务。闭包完成后队列恢复。需要注意dispatch_barrier_async只在自己创建的队列上有这种作用，在全局并发队列和串行队列上，效果和dispatch_sync一样 1234567891011121314151617181920212223242526272829303132333435363738//创建队列self.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);//改变setter- (void)setCount:(NSUInteger)count forKey:(NSString *)key&#123; key = [key copy]; //确保所有barrier都是async异步的 dispatch_barrier_async(self.isolationQueue, ^()&#123; if (count == 0) &#123; [self.counts removeObjectForKey:key]; &#125; else &#123; self.counts[key] = @(count); &#125; &#125;);&#125;- (void)dispatchBarrierAsyncDemo &#123; //防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。 dispatch_queue_t dataQueue = dispatch_queue_create(&quot;com.starming.gcddemo.dataqueue&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(dataQueue, ^&#123; [NSThread sleepForTimeInterval:2.f]; NSLog(@&quot;read data 1&quot;); &#125;); dispatch_async(dataQueue, ^&#123; NSLog(@&quot;read data 2&quot;); &#125;); //等待前面的都完成，在执行barrier后面的 dispatch_barrier_async(dataQueue, ^&#123; NSLog(@&quot;write data 1&quot;); [NSThread sleepForTimeInterval:1]; &#125;); dispatch_async(dataQueue, ^&#123; [NSThread sleepForTimeInterval:1.f]; NSLog(@&quot;read data 3&quot;); &#125;); dispatch_async(dataQueue, ^&#123; NSLog(@&quot;read data 4&quot;); &#125;);&#125; swift示例12345678910111213141516171819202122//使用dispatch_queue_create初始化一个并发队列。第一个参数遵循反向DNS命名习惯，方便描述，第二个参数是指出是并发还是顺序。private let concurrentPhotoQueue = dispatch_queue_create(&quot;com.raywenderlich.GooglyPuff.photoQueue&quot;, DISPATCH_QUEUE_CONCURRENT)func addPhoto(photo: Photo) &#123; dispatch_barrier_async(concurrentPhotoQueue) &#123; // 将写操作加入到自定义的队列。开始执行时这个就是队列中唯一的一个在执行的任务。 self._photos.append(photo) // barrier能够保障不会和其他任务同时进行。 dispatch_async(GlobalMainQueue) &#123; // 涉及到UI所以这个通知应该在主线程中，所以分派另一个异步任务到主队列中。 self.postContentAddedNotification() &#125; &#125;&#125;//上面是解决了写可能发生死锁，下面是使用dispatch_sync解决读时可能会发生的死锁。var photos: [Photo] &#123; var photosCopy: [Photo]! dispatch_sync(concurrentPhotoQueue) &#123; // 同步调度到concurrentPhotoQueue队列执行读操作 photosCopy = self._photos // 保存 &#125; return photosCopy&#125;//这样读写问题都解决了。 都用异步处理避免死锁，异步的缺点在于调试不方便，但是比起同步容易产生死锁这个副作用还算小的。 dispatch_apply进行快速迭代类似for循环，但是在并发队列的情况下dispatch_apply会并发执行block任务。12345678910111213for (size_t y = 0; y &lt; height; ++y) &#123; for (size_t x = 0; x &lt; width; ++x) &#123; // Do something with x and y here &#125;&#125;//因为可以并行执行，所以使用dispatch_apply可以运行的更快- (void)dispatchApplyDemo &#123; dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_apply(10, concurrentQueue, ^(size_t i) &#123; NSLog(@&quot;%zu&quot;,i); &#125;); NSLog(@&quot;The end&quot;); //这里有个需要注意的是，dispatch_apply这个是会阻塞主线程的。这个log打印会在dispatch_apply都结束后才开始执行&#125; dispatch_apply能避免线程爆炸，因为GCD会管理并发123456789101112131415161718- (void)dealWiththreadWithMaybeExplode:(BOOL)explode &#123; dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;,DISPATCH_QUEUE_CONCURRENT); if (explode) &#123; //有问题的情况，可能会死锁 for (int i = 0; i &lt; 999 ; i++) &#123; dispatch_async(concurrentQueue, ^&#123; NSLog(@&quot;wrong %d&quot;,i); //do something hard &#125;); &#125; &#125; else &#123; //会优化很多，能够利用GCD管理 dispatch_apply(999, concurrentQueue, ^(size_t i)&#123; NSLog(@&quot;correct %zu&quot;,i); //do something hard &#125;); &#125;&#125; 示例：1234567891011121314151617181920212223242526272829func downloadPhotosWithCompletion(completion: BatchPhotoDownloadingCompletionClosure?) &#123; var storedError: NSError! var downloadGroup = dispatch_group_create() let addresses = [OverlyAttachedGirlfriendURLString, SuccessKidURLString, LotsOfFacesURLString] dispatch_apply(UInt(addresses.count), GlobalUserInitiatedQueue) &#123; i in let index = Int(i) let address = addresses[index] let url = NSURL(string: address) dispatch_group_enter(downloadGroup) let photo = DownloadPhoto(url: url!) &#123; image, error in if let error = error &#123; storedError = error &#125; dispatch_group_leave(downloadGroup) &#125; PhotoManager.sharedManager.addPhoto(photo) &#125; dispatch_group_notify(downloadGroup, GlobalMainQueue) &#123; if let completion = completion &#123; completion(error: storedError) &#125; &#125;&#125; Block组合Dispatch_groupsdispatch groups是专门用来监视多个异步任务。dispatch_group_t实例用来追踪不同队列中的不同任务。 当group里所有事件都完成GCD API有两种方式发送通知，第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。 第一种使用dispatch_group_wait的swift的例子：1234567891011121314151617181920212223242526272829func downloadPhotosWithCompletion(completion: BatchPhotoDownloadingCompletionClosure?) &#123; dispatch_async(GlobalUserInitiatedQueue) &#123; // 因为dispatch_group_wait会租塞当前进程，所以要使用dispatch_async将整个方法要放到后台队列才能够保证主线程不被阻塞 var storedError: NSError! var downloadGroup = dispatch_group_create() // 创建一个dispatch group for address in [OverlyAttachedGirlfriendURLString, SuccessKidURLString, LotsOfFacesURLString] &#123; let url = NSURL(string: address) dispatch_group_enter(downloadGroup) // dispatch_group_enter是通知dispatch group任务开始了，dispatch_group_enter和dispatch_group_leave是成对调用，不然程序就崩溃了。 let photo = DownloadPhoto(url: url!) &#123; image, error in if let error = error &#123; storedError = error &#125; dispatch_group_leave(downloadGroup) // 保持和dispatch_group_enter配对。通知任务已经完成 &#125; PhotoManager.sharedManager.addPhoto(photo) &#125; dispatch_group_wait(downloadGroup, DISPATCH_TIME_FOREVER) // dispatch_group_wait等待所有任务都完成直到超时。如果任务完成前就超时了，函数会返回一个非零值，可以通过返回值判断是否超时。也可以用DISPATCH_TIME_FOREVER表示一直等。 dispatch_async(GlobalMainQueue) &#123; // 这里可以保证所有图片任务都完成，然后在main queue里加入完成后要处理的闭包，会在main queue里执行。 if let completion = completion &#123; // 执行闭包内容 completion(error: storedError) &#125; &#125; &#125;&#125; oc例子1234567891011121314- (void)dispatchGroupWaitDemo &#123; dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;,DISPATCH_QUEUE_CONCURRENT); dispatch_group_t group = dispatch_group_create(); //在group中添加队列的block dispatch_group_async(group, concurrentQueue, ^&#123; [NSThread sleepForTimeInterval:2.f]; NSLog(@&quot;1&quot;); &#125;); dispatch_group_async(group, concurrentQueue, ^&#123; NSLog(@&quot;2&quot;); &#125;); dispatch_group_wait(group, DISPATCH_TIME_FOREVER); NSLog(@&quot;go on&quot;);&#125; 第二种使用dispatch_group_notify的swift的例子：123456789101112131415161718192021222324252627func downloadPhotosWithCompletion(completion: BatchPhotoDownloadingCompletionClosure?) &#123; // 不用加dispatch_async，因为没有阻塞主进程 var storedError: NSError! var downloadGroup = dispatch_group_create() for address in [OverlyAttachedGirlfriendURLString, SuccessKidURLString, LotsOfFacesURLString] &#123; let url = NSURL(string: address) dispatch_group_enter(downloadGroup) let photo = DownloadPhoto(url: url!) &#123; image, error in if let error = error &#123; storedError = error &#125; dispatch_group_leave(downloadGroup) &#125; PhotoManager.sharedManager.addPhoto(photo) &#125; dispatch_group_notify(downloadGroup, GlobalMainQueue) &#123; // dispatch_group_notify和dispatch_group_wait的区别就是是异步执行闭包的，当dispatch groups中没有剩余的任务时闭包才执行。这里是指明在主队列中执行。 if let completion = completion &#123; completion(error: storedError) &#125; &#125;&#125; oc例子1234567891011121314151617181920212223242526272829303132//dispatch_group_notify- (void)dispatchGroupNotifyDemo &#123; dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;,DISPATCH_QUEUE_CONCURRENT); dispatch_group_t group = dispatch_group_create(); dispatch_group_async(group, concurrentQueue, ^&#123; NSLog(@&quot;1&quot;); &#125;); dispatch_group_async(group, concurrentQueue, ^&#123; NSLog(@&quot;2&quot;); &#125;); dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123; NSLog(@&quot;end&quot;); &#125;); NSLog(@&quot;can continue&quot;);&#125;//dispatch_group_wait- (void)dispatchGroupWaitDemo &#123; dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;,DISPATCH_QUEUE_CONCURRENT); dispatch_group_t group = dispatch_group_create(); //在group中添加队列的block dispatch_group_async(group, concurrentQueue, ^&#123; [NSThread sleepForTimeInterval:2.f]; NSLog(@&quot;1&quot;); &#125;); dispatch_group_async(group, concurrentQueue, ^&#123; NSLog(@&quot;2&quot;); &#125;); dispatch_group_wait(group, DISPATCH_TIME_FOREVER); NSLog(@&quot;can continue&quot;);&#125; 如何对现有API使用dispatch_group_t12345678910111213141516171819202122232425262728293031323334//给Core Data的-performBlock:添加groups。组合完成任务后使用dispatch_group_notify来运行一个block即可。- (void)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block&#123; if (group == NULL) &#123; [self performBlock:block]; &#125; else &#123; dispatch_group_enter(group); [self performBlock:^()&#123; block(); dispatch_group_leave(group); &#125;]; &#125;&#125;//NSURLConnection也可以这样做+ (void)withGroup:(dispatch_group_t)group sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue *)queue completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler&#123; if (group == NULL) &#123; [self sendAsynchronousRequest:request queue:queue completionHandler:handler]; &#125; else &#123; dispatch_group_enter(group); [self sendAsynchronousRequest:request queue:queue completionHandler:^(NSURLResponse *response, NSData *data, NSError *error)&#123; handler(response, data, error); dispatch_group_leave(group); &#125;]; &#125;&#125; 注意事项 dispatch_group_async等价于dispatch_group_enter() 和 dispatch_group_leave()的组合。 dispatch_group_enter() 必须运行在 dispatch_group_leave() 之前。 dispatch_group_enter() 和 dispatch_group_leave() 需要成对出现的 Dispatch Block队列执行任务都是block的方式， 创建block 1234567891011121314- (void)createDispatchBlock &#123; //normal way dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;com.starming.gcddemo.concurrentqueue&quot;,DISPATCH_QUEUE_CONCURRENT); dispatch_block_t block = dispatch_block_create(0, ^&#123; NSLog(@&quot;run block&quot;); &#125;); dispatch_async(concurrentQueue, block); //QOS way dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(0, QOS_CLASS_USER_INITIATED, -1, ^&#123; NSLog(@&quot;run qos block&quot;); &#125;); dispatch_async(concurrentQueue, qosBlock);&#125; dispatch_block_wait：可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束 123456789101112- (void)dispatchBlockWaitDemo &#123; dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL); dispatch_block_t block = dispatch_block_create(0, ^&#123; NSLog(@&quot;star&quot;); [NSThread sleepForTimeInterval:5.f]; NSLog(@&quot;end&quot;); &#125;); dispatch_async(serialQueue, block); //设置DISPATCH_TIME_FOREVER会一直等到前面任务都完成 dispatch_block_wait(block, DISPATCH_TIME_FOREVER); NSLog(@&quot;ok, now can go on&quot;);&#125; dispatch_block_notify：可以监视指定dispatch block结束，然后再加入一个block到队列中。三个参数分别为，第一个是需要监视的block，第二个参数是需要提交执行的队列，第三个是待加入到队列中的block 1234567891011121314- (void)dispatchBlockNotifyDemo &#123; dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL); dispatch_block_t firstBlock = dispatch_block_create(0, ^&#123; NSLog(@&quot;first block start&quot;); [NSThread sleepForTimeInterval:2.f]; NSLog(@&quot;first block end&quot;); &#125;); dispatch_async(serialQueue, firstBlock); dispatch_block_t secondBlock = dispatch_block_create(0, ^&#123; NSLog(@&quot;second block run&quot;); &#125;); //first block执行完才在serial queue中执行second block dispatch_block_notify(firstBlock, serialQueue, secondBlock);&#125; dispatch_block_cancel：iOS8后GCD支持对dispatch block的取消123456789101112131415- (void)dispatchBlockCancelDemo &#123; dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL); dispatch_block_t firstBlock = dispatch_block_create(0, ^&#123; NSLog(@&quot;first block start&quot;); [NSThread sleepForTimeInterval:2.f]; NSLog(@&quot;first block end&quot;); &#125;); dispatch_block_t secondBlock = dispatch_block_create(0, ^&#123; NSLog(@&quot;second block run&quot;); &#125;); dispatch_async(serialQueue, firstBlock); dispatch_async(serialQueue, secondBlock); //取消secondBlock dispatch_block_cancel(secondBlock);&#125; 使用dispatch block object（调度块）在任务执行前进行取消dispatch block object可以为队列中的对象设置 示例，下载图片中途进行取消123456789101112131415161718192021222324252627282930313233343536373839404142func downloadPhotosWithCompletion(completion: BatchPhotoDownloadingCompletionClosure?) &#123; var storedError: NSError! let downloadGroup = dispatch_group_create() var addresses = [OverlyAttachedGirlfriendURLString, SuccessKidURLString, LotsOfFacesURLString] addresses += addresses + addresses // 扩展address数组，复制3份 var blocks: [dispatch_block_t] = [] // 一个保存block的数组 for i in 0 ..&lt; addresses.count &#123; dispatch_group_enter(downloadGroup) let block = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS) &#123; // 创建一个block，block的标志是DISPATCH_BLOCK_INHERIT_QOS_CLASS let index = Int(i) let address = addresses[index] let url = NSURL(string: address) let photo = DownloadPhoto(url: url!) &#123; image, error in if let error = error &#123; storedError = error &#125; dispatch_group_leave(downloadGroup) &#125; PhotoManager.sharedManager.addPhoto(photo) &#125; blocks.append(block) dispatch_async(GlobalMainQueue, block) // 把这个block放到GlobalMainQueue上异步调用。因为全局队列是一个顺序队列所以方便取消对象block，同时可以保证下载任务在downloadPhotosWithCompletion返回后才开始执行。 &#125; for block in blocks[3 ..&lt; blocks.count] &#123; let cancel = arc4random_uniform(2) // 随机返回一个整数，会返回0或1 if cancel == 1 &#123; dispatch_block_cancel(block) // 如果是1就取消block，这个只能发生在block还在队列中并没有开始的情况下。因为把block已经放到了GlobalMainQueue中，所以这个地方会先执行，执行完了才会执行block。 dispatch_group_leave(downloadGroup) // 因为已经dispatch_group_enter了，所以取消时也要将其都leave掉。 &#125; &#125; dispatch_group_notify(downloadGroup, GlobalMainQueue) &#123; if let completion = completion &#123; completion(error: storedError) &#125; &#125;&#125; Dispatch IO 文件操作dispatch io读取文件的方式类似于下面的方式，多个线程去读取文件的切片数据，对于大的数据文件这样会比单线程要快很多。123dispatch_async(queue,^&#123;/*read 0-99 bytes*/&#125;);dispatch_async(queue,^&#123;/*read 100-199 bytes*/&#125;);dispatch_async(queue,^&#123;/*read 200-299 bytes*/&#125;); dispatch_io_create：创建dispatch io dispatch_io_set_low_water：指定切割文件大小 dispatch_io_read：读取切割的文件然后合并。苹果系统日志API里用到了这个技术，可以在这里查看：https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c 12345678910111213141516171819202122232425262728293031323334353637383940pipe_q = dispatch_queue_create(&quot;PipeQ&quot;, NULL);//创建pipe_channel = dispatch_io_create(DISPATCH_IO_STREAM, fd, pipe_q, ^(int err)&#123; close(fd);&#125;);*out_fd = fdpair[1];//设置切割大小dispatch_io_set_low_water(pipe_channel, SIZE_MAX);dispatch_io_read(pipe_channel, 0, SIZE_MAX, pipe_q, ^(bool done, dispatch_data_t pipedata, int err)&#123; if (err == 0) &#123; size_t len = dispatch_data_get_size(pipedata); if (len &gt; 0) &#123; //对每次切块数据的处理 const char *bytes = NULL; char *encoded; uint32_t eval; dispatch_data_t md = dispatch_data_create_map(pipedata, (const void **)&amp;bytes, &amp;len); encoded = asl_core_encode_buffer(bytes, len); asl_msg_set_key_val(aux, ASL_KEY_AUX_DATA, encoded); free(encoded); eval = _asl_evaluate_send(NULL, (aslmsg)aux, -1); _asl_send_message(NULL, eval, aux, NULL); asl_msg_release(aux); dispatch_release(md); &#125; &#125; if (done) &#123; //semaphore +1使得不需要再等待继续执行下去。 dispatch_semaphore_signal(sem); dispatch_release(pipe_channel); dispatch_release(pipe_q); &#125;&#125;); Dispatch Source 用GCD监视进程Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表 方法 说明 DISPATCH_SOURCE_TYPE_DATA_ADD 数据增加 DISPATCH_SOURCE_TYPE_DATA_OR 数据OR DISPATCH_SOURCE_TYPE_MACH_RECV Mach端口接收 DISPATCH_SOURCE_TYPE_MEMORYPRESSURE 内存情况 DISPATCH_SOURCE_TYPE_READ 读数据 DISPATCH_SOURCE_TYPE_SIGNAL 信号 DISPATCH_SOURCE_TYPE_TIMER 定时器 DISPATCH_SOURCE_TYPE_VNODE 文件系统变化 DISPATCH_SOURCE_TYPE_WRITE 文件写入 方法 dispatch_source_create：创建dispatch source，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。 dispatch_source_set_event_handler：设置事件处理handler dispatch_source_set_cancel_handler：事件取消handler，就是在dispatch source释放前做些清理的事。 dispatch_source_cancel：关闭dispatch source，设置的事件处理handler不会被执行，已经执行的事件handler不会取消。 1234567891011NSRunningApplication *mail = [NSRunningApplication runningApplicationsWithBundleIdentifier:@&quot;com.apple.mail&quot;];if (mail == nil) &#123; return;&#125;pid_t const pid = mail.processIdentifier;self.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid, DISPATCH_PROC_EXIT, DISPATCH_TARGET_QUEUE_DEFAULT);dispatch_source_set_event_handler(self.source, ^()&#123; NSLog(@&quot;Mail quit.&quot;);&#125;);//在事件源传到你的事件处理前需要调用dispatch_resume()这个方法dispatch_resume(self.source); 监视文件夹内文件变化12345678910111213141516171819202122232425NSURL *directoryURL; // assume this is set to a directoryint const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);if (fd &lt; 0) &#123; char buffer[80]; strerror_r(errno, buffer, sizeof(buffer)); NSLog(@&quot;Unable to open \&quot;%@\&quot;: %s (%d)&quot;, [directoryURL path], buffer, errno); return;&#125;dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);dispatch_source_set_event_handler(source, ^()&#123; unsigned long const data = dispatch_source_get_data(source); if (data &amp; DISPATCH_VNODE_WRITE) &#123; NSLog(@&quot;The directory changed.&quot;); &#125; if (data &amp; DISPATCH_VNODE_DELETE) &#123; NSLog(@&quot;The directory has been deleted.&quot;); &#125;&#125;);dispatch_source_set_cancel_handler(source, ^()&#123; close(fd);&#125;);self.source = source;dispatch_resume(self.source);//还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听 NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为NSRunLoopCommonModes的runloop，如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer，如下。12345678dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,0, 0, DISPATCH_TARGET_QUEUE_DEFAULT);dispatch_source_set_event_handler(source, ^()&#123; NSLog(@&quot;Time flies.&quot;);&#125;);dispatch_time_t startdispatch_source_set_timer(source, DISPATCH_TIME_NOW, 5ull * NSEC_PER_SEC,100ull * NSEC_PER_MSEC);self.source = source;dispatch_resume(self.source); Dispatch Semaphore和的介绍另外一种保证同步的方法。使用dispatch_semaphore_signal加1dispatch_semaphore_wait减1，为0时等待的设置方式来达到线程同步的目的和同步锁一样能够解决资源抢占的问题。12345678910111213//dispatch semaphore- (void)dispatchSemaphoreDemo &#123; //创建semaphore dispatch_semaphore_t semaphore = dispatch_semaphore_create(0); dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; NSLog(@&quot;start&quot;); [NSThread sleepForTimeInterval:1.f]; NSLog(@&quot;semaphore +1&quot;); dispatch_semaphore_signal(semaphore); //+1 semaphore &#125;); dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;continue&quot;);&#125; 锁这里简单介绍下iOS中常用的各种锁和他们的性能。 NSRecursiveLock：递归锁，可以在一个线程中反复获取锁不会造成死锁，这个过程会记录获取锁和释放锁的次数来达到何时释放的作用。 NSDistributedLock：分布锁，基于文件方式的锁机制，可以跨进程访问。 NSConditionLock：条件锁，用户定义条件，确保一个线程可以获取满足一定条件的锁。因为线程间竞争会涉及到条件锁检测，系统调用上下切换频繁导致耗时是几个锁里最长的。 OSSpinLock：自旋锁，不进入内核，减少上下文切换，性能最高，但抢占多时会占用较多cpu，好点多，这时使用pthread_mutex较好。 pthread_mutex_t：同步锁基于C语言，底层api性能高，使用方法和其它的类似。 @synchronized：更加简单。 dispatch_suspend和dispatch_resume挂起和恢复队列dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。 dispatch_set_context和dispatch_get_contextGCD深入操作缓冲区：dispatch_data_t基于零碎的内存区域，使用dispatch_data_apply来遍历，还可以用dispatch_data_create_subrange来创建一个不做任何拷贝的子区域I/O调度：使用GCD提供的dispatch_io_read，dispatch_io_write和dispatch_io_close测试：使用dispatch_benchmark小工具原子操作： libkern/OSAtomic.h里可以查看那些函数，用于底层多线程编程。 GCD死锁当前串行队列里面同步执行当前串行队列就会死锁，解决的方法就是将同步的串行队列放到另外一个线程就能够解决。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556- (void)deadLockCase1 &#123; NSLog(@&quot;1&quot;); //主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。 dispatch_sync(dispatch_get_main_queue(), ^&#123; NSLog(@&quot;2&quot;); &#125;); NSLog(@&quot;3&quot;);&#125;- (void)deadLockCase2 &#123; NSLog(@&quot;1&quot;); //3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行 dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123; NSLog(@&quot;2&quot;); &#125;); NSLog(@&quot;3&quot;);&#125;- (void)deadLockCase3 &#123; dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL); NSLog(@&quot;1&quot;); dispatch_async(serialQueue, ^&#123; NSLog(@&quot;2&quot;); //串行队列里面同步一个串行队列就会死锁 dispatch_sync(serialQueue, ^&#123; NSLog(@&quot;3&quot;); &#125;); NSLog(@&quot;4&quot;); &#125;); NSLog(@&quot;5&quot;);&#125;- (void)deadLockCase4 &#123; NSLog(@&quot;1&quot;); dispatch_async(dispatch_get_global_queue(0, 0), ^&#123; NSLog(@&quot;2&quot;); //将同步的串行队列放到另外一个线程就能够解决 dispatch_sync(dispatch_get_main_queue(), ^&#123; NSLog(@&quot;3&quot;); &#125;); NSLog(@&quot;4&quot;); &#125;); NSLog(@&quot;5&quot;);&#125;- (void)deadLockCase5 &#123; dispatch_async(dispatch_get_global_queue(0, 0), ^&#123; NSLog(@&quot;1&quot;); //回到主线程发现死循环后面就没法执行了 dispatch_sync(dispatch_get_main_queue(), ^&#123; NSLog(@&quot;2&quot;); &#125;); NSLog(@&quot;3&quot;); &#125;); NSLog(@&quot;4&quot;); //死循环 while (1) &#123; // &#125;&#125; GCD实际使用FMDB如何使用dispatch_queue_set_specific和dispatch_get_specific来防止死锁作用类似objc_setAssociatedObject跟objc_getAssociatedObject1234567891011static const void * const kDispatchQueueSpecificKey = &amp;kDispatchQueueSpecificKey;//创建串行队列，所有数据库的操作都在这个队列里_queue = dispatch_queue_create([[NSString stringWithFormat:@&quot;fmdb.%@&quot;, self] UTF8String], NULL);//标记队列dispatch_queue_set_specific(_queue, kDispatchQueueSpecificKey, (__bridge void *)self, NULL);//检查是否是同一个队列来避免死锁的方法- (void)inDatabase:(void (^)(FMDatabase *db))block &#123; FMDatabaseQueue *currentSyncQueue = (__bridge id)dispatch_get_specific(kDispatchQueueSpecificKey); assert(currentSyncQueue != self &amp;&amp; &quot;inDatabase: was called reentrantly on the same queue, which would lead to a deadlock&quot;);&#125; DTCoreText使用GCD加快解析速度DTCoreText采用的是SAX解析，iOS自带了XML/HTML的解析引擎libxml，提供了两个解析接口，DOM解析和SAX解析，前者使用简单但是占用内存多，SAX解析由于不会返回一个dom树，采用的是查到一个标签比如回调startElement方法碰到内容就回调_characters碰到类似就回调endElement这样的方式。 根据这种解析方式DTCoreText使用多线程解析能够更快的解析，DTHTMLAttributedStringBuilder使用三个dispatch_queue _dataParsingQueue：解析html的 _treeBuildingQueue：生成dom树的 _stringAssemblyQueue：组装NSAttributeString的 获取三个队列全部完成采用了dispatch_group的dispatch_group_wait这种阻塞同步方式来返回结果。 iOS系统版本新特性iOS8新加了一个功能叫Quality of Service(QoS)，里面提供了一下几个更容易理解的枚举名来使用user interactive，user initiated，utility和background。下面的表做了对比 Global queue Corresponding QoS class 说明 Main thread NSQualityOfServiceUserInteractive UI相关，交互等 DISPATCH_QUEUE_PRIORITY_HIGH NSQualityOfServiceUserInitiated 用户发起需要马上得到结果进行后续任务 DISPATCH_QUEUE_PRIORITY_DEFAULT NSQualityOfServiceDefault 默认的不应该使用这个设置任务 DISPATCH_QUEUE_PRIORITY_LOW NSQualityOfServiceUtility 花费时间稍多比如下载，需要几秒或几分钟的 DISPATCH_QUEUE_PRIORITY_BACKGROUND NSQualityOfServiceBackground 不可见在后台的操作可能需要好几分钟甚至几小时的]]></content>
      <tags>
        <tag>GCD (Objective-C高级编程：iOS与OS X多线程和内存管理)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods利用sourectree发布自己的私有库]]></title>
    <url>%2F2017%2F10%2F21%2FCocoaPods%E5%88%A9%E7%94%A8sourectree%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E6%9C%89%E5%BA%93%2F</url>
    <content type="text"><![CDATA[1.创建Pod项目工程最近被公司项目忙的喘不过起来，有好几天没更新博客了，但心里一直惦记着这事，回来的时候太累了，吃完饭就睡了，只能周末来更新了。。。 1.cd进入要创建项目的目录然后 执行以下命令 1234#pod lib create [项目名]$pod lib create TBFontAdjust 接着在Terminal控制台会输出5个问题： 1.What language do you want to use?? [ Swift / ObjC ] ObjC 第一个问题是问你选择Swift还是Objc构建项目。此教程 选的是ObjC 2.Would you like to include a demo application with your library? [ Yes / No ] Yes 第二个问题问你是否需要创建一个Demo项目，此教程选的是Yes 3.Which testing frameworks will you use? [ Specta / Kiwi / None ] None 第三个问题让你是否选择一个测试框架，此教程选 None 4.Would you like to do view based testing? [ Yes / No ] Yes 5.What is your class prefix? tdb 填写完成后，会自动打开工程。 2.配置pod工程1.首先得pod 工程push到远程仓库，我选用sourectree比较直观 本地-&gt;+新仓库-&gt;添加已经存在的仓库 导入后，点击右键发布到远程 根据需求选择私有（github要收费）还是公有 发布后，点击进项目，给项目加一个标签 0.1.0（这个要与podspec一致）标签推送到远程 然后，登录github将下载地址copy出来，用来填写配置信息。 2.配置123456789101112131415161718192021222324252627282930313233343536373839404142Pod::Spec.new do |s| s.name = &apos;TBFontAdjust&apos;//项目名 s.version = &apos;0.1.0&apos;//版本 s.summary = &apos;iOS adjust test&apos;//简介# This description is used to generate tags and improve search results.# * Think: What does it do? Why did you write it? What is the focus?# * Try to keep it short, snappy and to the point.# * Write the description between the DESC delimiters below.# * Finally, don&apos;t worry about the indent, CocoaPods strips it!//描述 s.description = &lt;&lt;-DESC测试 DESC s.homepage = &apos;https://github.com/bobtaocool/TBFontAdjust&apos; # s.screenshots = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos; #开源协议 s.license = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125; #作者 s.author = &#123; &apos;TDB&apos; =&gt; &apos;1639008265@qq.com&apos; &#125; #源代码的链接地址 s.source = &#123; :git =&gt; &apos;https://github.com/bobtaocool/TBFontAdjust.git&apos;, :tag =&gt; s.version.to_s &#125; # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos; #支持的平台及版本 s.ios.deployment_target = &apos;8.0&apos; #资源文件地址（把你的库代码放在这个Classes） s.source_files = &apos;TBFontAdjust/Classes/**/*&apos; # s.resource_bundles = &#123; # &apos;TBFontAdjust&apos; =&gt; [&apos;TBFontAdjust/Assets/*.png&apos;] # &#125;#公开头文件地址 # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;#所需的framework，多个用逗号隔开 # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;#依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;end 配置完成可以进行验证 pod lib lint 如出现警告：可以 podspec –use-libraries –allow-warnings 如果出现passed validation说明配置没问题 配置好后，sourectree 提交,推送到远程。 3.本地测试打开Example工程目录Podfile文件修改下pod 的引用 12#pod &apos;MyLib&apos;, :path =&gt; &apos;../&apos; # 指定路径pod &apos;TBFontAdjust&apos;, :podspec =&gt; &apos;../TBFontAdjust.podspec&apos; 然后在Example工程目录下执行pod update命令 打开项目工程，现在可以看到库文件都被加载到Pods子项目中了. 2.创建私有的仓库(Spec Repo)执行以下命令:(库名，地址需和配置文件填写一样) pod repo add 库名 地址 TBFontAdjust.podspec提交到远程Spec Repo仓库中cd进入TBFontAdjust项目根目录 12# pod repo push [Repo名] [podspec 文件名字]$ pod repo push TBFontAdjust TBFontAdjust.podspec 如果提交成功可以在~/.cocoapods/repos/MySpecs目录下查看 上传项目到Cocoapods官方的仓库里去1pod trunk push TBFontAdjust.podspec 如果出现[!] You need to register a session first 执行命令注册: pod trunk register xxxx@qq.com tdb 再次执行:pod trunk push TBFontAdjust.podspec 123456789101112131415Updating spec repo `master`Validating podspec -&gt; TBFontAdjust (0.1.0)Updating spec repo `master`-------------------------------------------------------------------------------- 🎉 Congrats 🚀 TBFontAdjust (0.1.0) successfully published 📅 October 21st, 08:47 🌎 https://cocoapods.org/pods/TBFontAdjust 👍 Tell your friends!--------------------------------------------------------------------------------bogon:TBFontAdjust bob$ 说明提交成功了. 3.查看操作是否成功pod search TBFontAdjust 有时候会遇到搜索不到的情况: [!] Unable to find a pod with name, author, summary, or description matching TBFontAdjust 当遇到上面这种情况的时候，按如下步骤进行操作：执行pod setup。执行该指令之后，我们再试试“pod search GofWebImage”，如果能够成功搜索出结果，那么不需要做下面步骤的操作；如果还是搜索不到，那么继续后续步骤；删除~/Library/Caches/CocoaPods目录下的s 如果出现这个 [!] An unexpected version directory Assets was encountered for the 解决方法:进入指定文件夹repos把TBFontAdjust删除即可。 参考链接:CocoaPods应用篇之搭建并发布自己的私有库 利用CocoaPods创建私有库]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods安装及出现的问题总结]]></title>
    <url>%2F2017%2F10%2F16%2FCocoaPods%E5%AE%89%E8%A3%85%E5%8F%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Cocopod 是iOS开发中常用的第三方管理工具，通过CocoaPods，我们可以将第三方的依赖库统一管理起来，配置和更新只需要通过简单的几行命令即可完成，大大的提高了实际开发中的工作效率，掌握CocoaPods的使用是必不可少的基本技能了。 安装CocoaPods1.安装前先升级Ruby环境12$sudo gem update —system 由于墙的原因会导致这一步非常缓慢,可以用淘宝的Ruby镜像来访问该网站 12$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ 查看是否更换成功: 12gem sources -l 安装Cocoapods1sudo gem install cocoapods 这个时候会提示你输入密码 输入后开始安装… 安装成功后 查看版本 1$ pod --version 使用CocoaPods搜索目标库12$ pod search 库名 创建Podfile1234$ cd /项目文件touch Podfile //创建Podfile 创建成功后会在目录文件夹看到 编辑Podfile12$ vim Podfile 将搜索出来的库，拷贝进去配置如下图: 具体参考:cocoapods 123platform :ios, ‘7.0’ ／／支持的最低版本inhibit_all_warnings! //去除第三方的警告use_frameworks! //修改引入方式，加了这句引入使用#import ” ” ; 未加使用#import &lt; &gt; 执行安装／更新123pod installpod update CocoaPods 实现快速更新不检查CocoaPods specs更新 12pod install --verbose --no-repo-updatepod update --verbose --no-repo-update 升级CocoaPods12345671.添加镜像$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/$ gem sources -l2.升级 gem查看gem gem --versionsudo gem update --system 1-2这个和安装流程差不多，不再重复 123.升级cocopodsudo gem install -n /usr/local/bin cocoapods --pre 1234.设置pod 仓库pod setup 125.查看版本pod --version CocoaPods 使用中的一些问题CocoaPods 搜索不到最新的版本库1231.cocoapods的版本过低2.还没有更新本地仓库 按照上述更新cocoapods即可! github上项目下载打开出错123diff: /../Podfile.lock: No such file or directory diff: Manifest.lock: No such file or directory error: The sandbox is not in sync with the Podfile.lock. Run &apos;pod install&apos; or update your CocoaPods installation.` 1.关闭当前的工作空间，删除掉文件夹中的workspace2.然后重新pod install。3.install完成之后，通过workspace打开工作空间，clean+build即可： 12rm -rf MyProject.xcworkspace pod install 多个xcode出现问题1sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer 那么你的命令行就要修改一下： 1sudo xcode-select -switch /Applications/Xcode 7.3.1.app/Contents/Developer 根据你默认的xcode来修改在/Applications/和/Contents/Developer中间的app的名字，如果你默认的是Xcode x.x.x.app，中间就要替换掉哟！]]></content>
      <tags>
        <tag>工具推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown的基本使用]]></title>
    <url>%2F2017%2F10%2F12%2FMarkDown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前几天搭建好了个人网站，买了域名，折腾了好几个晚上，终于往事俱备，只欠东风了。估摸着第一篇写些啥，既然需要Markdown来编写，那就从markdown开刀吧! 写博客必须要有一定的自制力，才能坚持下去，上班没法写，只能下班抽点时间出来总结一下，篇幅，数量不定，经过岁月沉淀的出来的才是好博客。 工欲善其事，必先利其器！ 我使用的工具是:Atom 下面进入正题： 标题123456#一级标题##二级标题###三级标题####四级标题#####五及标题 展示效果如下图所示： 字体123456**粗体***斜体****斜体+粗体*** 效果如下: 分割线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789101112* * *********- - -世界你好---------------------------------------* 世界你好 反斜杠可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 标签），你可以在星号的前面加上反斜杠： 12\*literal asterisks\* *literal asterisks* 图片与链接图片123![命名](图片链接)比如:![字体](http://oxv4ynhvc.bkt.clouddn.com/MKFont.png) 链接123[链接显示文字](链接地址)比如:[博客](http://taodongbo.cn) 博客地址: 博客 列表无序12345* **加粗**举个例子* 被星星包围的加醋**加粗**- **减号**一样的效果+ **加号**一样的效果 效果如下 有序1234561.文本2.标题3.图片 引用12&gt; 噫吁嚱，危乎高哉！蜀道之难，难于上青天！蚕丛及鱼凫，开国何茫然！尔来四万八千岁，不与秦塞通人烟。西当太白有鸟道，可以横绝峨眉巅。地崩山摧壮士死，然后天梯石栈相钩连。上有六龙回日之高标，下有冲波逆折之 效果如下: 代码引用一句代码与多句的区别在于 ` 还是 3个` 一句代码12`[self.view addSubView:label]` 一段代码 展示效果分别如下: 表格123456|默认|居中|左对齐|右对齐||--|:-:|:-|-:||测试换行\n不支持换行|测试1|测试2|测试3||*斜体*|**粗体**|***斜体+粗体***|正常||# 不可放标题|[可放链接](taodongbo.cn)|![可放图片](http://oxv4ynhvc.bkt.clouddn.com/MKYY.png)|`可放代码 hello word ` 以上是一些基本的用法，更多参考语法说明]]></content>
      <categories>
        <category>工具推荐</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
